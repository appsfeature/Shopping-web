Index: browser/src/main/java/com/browser/browser/BrowserWebView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.browser.browser;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.net.Uri;\r\nimport android.net.http.SslError;\r\nimport android.os.Build;\r\nimport android.text.TextUtils;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.webkit.ConsoleMessage;\r\nimport android.webkit.SslErrorHandler;\r\nimport android.webkit.ValueCallback;\r\nimport android.webkit.WebChromeClient;\r\nimport android.webkit.WebResourceError;\r\nimport android.webkit.WebResourceRequest;\r\nimport android.webkit.WebResourceResponse;\r\nimport android.webkit.WebSettings;\r\nimport android.webkit.WebView;\r\nimport android.webkit.WebViewClient;\r\n\r\nimport androidx.annotation.MainThread;\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.browser.BrowserSdk;\r\nimport com.browser.R;\r\nimport com.browser.interfaces.BrowserListener;\r\nimport com.browser.interfaces.OverrideType;\r\nimport com.browser.util.BrowserConstant;\r\nimport com.browser.util.BrowserLogger;\r\nimport com.browser.views.VideoEnabledWebChromeClient;\r\nimport com.browser.views.VideoEnabledWebView;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\n\r\n\r\npublic class BrowserWebView {\r\n\r\n    private static final String TAG = \"BrowserActivity\";\r\n    private final Activity activity;\r\n    private VideoEnabledWebView webView;\r\n    private boolean isRemoveHeaderFooter = false;\r\n    private boolean isFixCropRatio = false;\r\n    private BrowserListener callback;\r\n    private View layoutInternetError;\r\n    private String mUrl;\r\n    private boolean isDisableExtraError = false;\r\n    private boolean isEmbedPdf = false;\r\n    private boolean isOpenPdfInWebView = false;\r\n\r\n    public BrowserWebView(Activity activity) {\r\n        this.activity = activity;\r\n    }\r\n\r\n    public BrowserWebView addBrowserListener(BrowserListener callback) {\r\n        this.callback = callback;\r\n        return this;\r\n    }\r\n\r\n    public BrowserWebView setEmbedPDF(boolean isEmbedPdf) {\r\n        this.isEmbedPdf = isEmbedPdf;\r\n        return this;\r\n    }\r\n\r\n    public BrowserWebView setOpenPdfInWebView(boolean isOpenPdfInWebView) {\r\n        this.isOpenPdfInWebView = isOpenPdfInWebView;\r\n        return this;\r\n    }\r\n\r\n    public BrowserWebView setRemoveHeaderFooter(boolean removeHeaderFooter) {\r\n        this.isRemoveHeaderFooter = removeHeaderFooter;\r\n        return this;\r\n    }\r\n\r\n    public boolean isDisableExtraError() {\r\n        return isDisableExtraError;\r\n    }\r\n\r\n    public BrowserWebView setDisableExtraError(boolean disableExtraError) {\r\n        this.isDisableExtraError = disableExtraError;\r\n        return this;\r\n    }\r\n\r\n    public BrowserWebView setFixCropRatio(boolean fixCropRatio) {\r\n        this.isFixCropRatio = fixCropRatio;\r\n        return this;\r\n    }\r\n\r\n    private ValueCallback<Uri[]> mFilePathCallback;\r\n\r\n\r\n    public void init(Activity activity) {\r\n        View rootView = activity.getWindow().getDecorView().getRootView();\r\n        initView(rootView);\r\n    }\r\n\r\n    public void init(View view) {\r\n        initView(view);\r\n    }\r\n\r\n    public void loadUrl(String url) {\r\n        BrowserLogger.info(\"loadUrl()\");\r\n        this.mUrl = url;\r\n        if (webView == null || TextUtils.isEmpty(url)) {\r\n            BrowserSdk.showToast(activity, \"Invalid Url\");\r\n            BrowserLogger.e(\"loadUrl()\", \"Url is null or empty\");\r\n            activity.finish();\r\n            return;\r\n        }\r\n        webView.setVisibility(View.INVISIBLE);\r\n        if (callback != null) {\r\n            callback.onProgressBarUpdate(View.VISIBLE);\r\n        }\r\n        webView.loadUrl(url);\r\n        BrowserLogger.d(\"loadUrl()\", url);\r\n    }\r\n\r\n    private void initView(View rootView) {\r\n        webView = rootView.findViewById(R.id.webView);\r\n        layoutInternetError = rootView.findViewById(R.id.layout_internet_error);\r\n        (rootView.findViewById(R.id.btn_refresh)).setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                updateErrorUi(false);\r\n                loadUrl(mUrl);\r\n            }\r\n        });\r\n        webView.setWebChromeClient(new WebChromeClient() {\r\n\r\n            @Override\r\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {\r\n                mFilePathCallback = filePathCallback;\r\n                openFileChooser();\r\n                return true;//; return super.onShowFileChooser(webView, filePathCallback, fileChooserParams);\r\n            }\r\n\r\n            @Override\r\n            public boolean onConsoleMessage(ConsoleMessage consoleMessage) {\r\n                super.onConsoleMessage(consoleMessage);\r\n                if (consoleMessage.message().startsWith(TAG)) {\r\n                    if (consoleMessage.message().toLowerCase().contains(\"viewable only\") && consoleMessage.message().toLowerCase().contains(\"landscape\")) {\r\n//                        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        View nonVideoLayout = rootView.findViewById(R.id.nonVideoLayout); // Your own view, read class comments\r\n        ViewGroup videoLayout = (ViewGroup) rootView.findViewById(R.id.videoLayout); // Your own view, read class comments\r\n        //noinspection all\r\n        View loadingView = activity.getLayoutInflater().inflate(R.layout.view_loading_video, null); // Your own view, read class comments\r\n        // See all available constructors...\r\n        // Subscribe to standard events, such as onProgressChanged()...\r\n        // Your code...\r\n        VideoEnabledWebChromeClient webChromeClient = new VideoEnabledWebChromeClient(nonVideoLayout, videoLayout, loadingView, webView) // See all available constructors...\r\n        {\r\n            // Subscribe to standard events, such as onProgressChanged()...\r\n            @Override\r\n            public void onProgressChanged(WebView view, int progress) {\r\n                // Your code...\r\n            }\r\n        };\r\n        webChromeClient.setOnToggledFullscreen(new VideoEnabledWebChromeClient.ToggledFullscreenCallback() {\r\n            @Override\r\n            public void toggledFullscreen(boolean fullscreen) {\r\n                // Your code to handle the full-screen change, for example showing and hiding the title bar. Example:\r\n                if (fullscreen) {\r\n                    WindowManager.LayoutParams attrs = activity.getWindow().getAttributes();\r\n                    attrs.flags |= WindowManager.LayoutParams.FLAG_FULLSCREEN;\r\n                    attrs.flags |= WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;\r\n                    activity.getWindow().setAttributes(attrs);\r\n                    activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);\r\n                    if (callback != null) {\r\n                        callback.onToolbarVisibilityUpdate(View.GONE);\r\n                    }\r\n                } else {\r\n                    WindowManager.LayoutParams attrs = activity.getWindow().getAttributes();\r\n                    attrs.flags &= ~WindowManager.LayoutParams.FLAG_FULLSCREEN;\r\n                    attrs.flags &= ~WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;\r\n                    activity.getWindow().setAttributes(attrs);\r\n                    activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);\r\n                    if (callback != null) {\r\n                        callback.onToolbarVisibilityUpdate(View.VISIBLE);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        webView.setWebChromeClient(webChromeClient);\r\n\r\n        webView.setWebViewClient(new WebViewClient() {\r\n\r\n            @Override\r\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n                super.shouldOverrideUrlLoading(view, request);\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n                    String requestUrl = request.getUrl().toString();\r\n                    return filterUrl(view, requestUrl);\r\n                }\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\r\n                super.shouldOverrideUrlLoading(view, url);\r\n                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n                    return filterUrl(view, url);\r\n                }\r\n                return false;\r\n            }\r\n\r\n            private boolean filterUrl(WebView view, String url) {\r\n                BrowserLogger.d(\"shouldOverrideUrlLoading()\", url);\r\n                if (BrowserSdk.getInstance().getUrlOverloadingList().size() > 0) {\r\n                    for (String overrideUrl : BrowserSdk.getInstance().getUrlOverloadingList()) {\r\n                        if (url.contains(overrideUrl)) {\r\n                            BrowserSdk.getInstance().dispatchUrlOverloadingListener(view, url, OverrideType.OverrideUrlLoading);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n                if (url.startsWith(\"tel:\")) {\r\n                    try {\r\n                        Intent intent = new Intent(Intent.ACTION_DIAL,\r\n                                Uri.parse(url));\r\n                        activity.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        BrowserSdk.showToast(activity, e.getMessage());\r\n                    }\r\n                    return true;\r\n                }\r\n                if (url.contains(\"geo:\") || url.contains(\"google.com/maps/\")) {\r\n                    try {\r\n                        Uri gmmIntentUri = Uri.parse(url);\r\n                        Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);\r\n                        mapIntent.setPackage(\"com.google.android.apps.maps\");\r\n                        activity.startActivity(mapIntent);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        BrowserSdk.showToast(activity, e.getMessage());\r\n                    }\r\n                    return true;\r\n                }\r\n                if (isUrlPdfType(url)) {\r\n                    openPDF(url);\r\n                    return true;\r\n                }\r\n                if (url.endsWith(\"viewer.action=download\")) {\r\n                    Intent i = new Intent(Intent.ACTION_VIEW);\r\n                    i.setData(Uri.parse(url));\r\n                    activity.startActivity(i);\r\n                    return true;\r\n                }\r\n\r\n                if (isUrlIntentType(url) || isUrlWhatsAppType(url) || isUrlTelegramType(url) || isUrlFbMessengerType(url)) {\r\n                    BrowserSdk.openIntentUrl(activity, url);\r\n                    view.stopLoading();\r\n                    if (callback != null) {\r\n                        callback.onProgressBarUpdate(View.GONE);\r\n                    }\r\n                    return true;\r\n                }\r\n                if (isUrlFacebookType(url) || isUrlTwitterType(url)) {\r\n                    BrowserSdk.openUrlExternal(activity, url);\r\n                    view.stopLoading();\r\n                    return true;\r\n                }\r\n                view.loadUrl(url);\r\n                BrowserSdk.getInstance().dispatchUrlOverloadingListener(view, url, OverrideType.LoadUrl);\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public void onLoadResource(WebView view, String url) {\r\n                setHideGoogleTranslatorHeaderJavaScript(view);\r\n            }\r\n\r\n            @Override\r\n            public void onPageCommitVisible(WebView view, String url) {\r\n                super.onPageCommitVisible(view, url);\r\n                if (callback != null) {\r\n                    callback.onProgressBarUpdate(View.GONE);\r\n                }\r\n                if (webView != null) {\r\n                    webView.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onPageFinished(WebView view, String url) {\r\n                super.onPageFinished(view, url);\r\n                BrowserLogger.info(\"onPageFinished()\");\r\n                if (callback != null) {\r\n                    callback.onProgressBarUpdate(View.GONE);\r\n                }\r\n                if (webView != null) {\r\n                    webView.setVisibility(View.VISIBLE);\r\n                }\r\n                BrowserSdk.getInstance().dispatchUrlOverloadingListener(view, url, OverrideType.PageFinished);\r\n//                if (!isUrlPdfType(url))\r\n//                    view.loadUrl(\"javascript:console.log('\" + TAG + \"'+document.getElementsByTagName('html')[0].innerHTML);\");\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\r\n                if (errorResponse != null) {\r\n                    try {\r\n                        BrowserLogger.info(\"onReceivedHttpError()\", errorResponse.toString());\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                if (isDisableExtraError) {\r\n                    updateErrorUi(true);\r\n                }\r\n                super.onReceivedHttpError(view, request, errorResponse);\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\r\n                if (error != null) {\r\n                    try {\r\n                        BrowserLogger.info(\"onReceivedSslError()\", error.toString());\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                if (isDisableExtraError) {\r\n                    updateErrorUi(true);\r\n                }\r\n                super.onReceivedSslError(view, handler, error);\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\r\n                if (description != null) {\r\n                    try {\r\n                        BrowserLogger.e(\"onReceivedError()\", \"errorCode:\" + errorCode, description);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                updateErrorUi(true);\r\n                BrowserSdk.getInstance().dispatchUrlOverloadingListener(view, \"\", OverrideType.ReceivedError);\r\n                super.onReceivedError(view, errorCode, description, failingUrl);\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\r\n                if (error != null) {\r\n                    try {\r\n                        BrowserLogger.e(\"onReceivedError()\", error.toString());\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                updateErrorUi(true);\r\n                BrowserSdk.getInstance().dispatchUrlOverloadingListener(view, \"\", OverrideType.ReceivedError);\r\n                super.onReceivedError(view, request, error);\r\n            }\r\n        });\r\n        webView.getSettings().setJavaScriptEnabled(true);\r\n        webView.getSettings().setAllowFileAccess(true);\r\n        webView.getSettings().setAllowFileAccessFromFileURLs(true);\r\n        webView.getSettings().setAllowUniversalAccessFromFileURLs(true);\r\n        webView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);\r\n        webView.getSettings().setAllowContentAccess(true);\r\n        webView.getSettings().setSupportMultipleWindows(false);\r\n        webView.getSettings().setDomStorageEnabled(true);\r\n        webView.getSettings().setBuiltInZoomControls(false);\r\n        webView.getSettings().setAppCacheEnabled(true);\r\n        webView.getSettings().setLoadWithOverviewMode(true);\r\n//        webView.getSettings().setUseWideViewPort(true);\r\n        webView.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);\r\n        webView.getSettings().setAppCachePath(activity.getApplicationContext()\r\n                .getCacheDir().getAbsolutePath());\r\n    }\r\n\r\n    private void openPDF(String mUrl) {\r\n        if (!TextUtils.isEmpty(mUrl)) {\r\n            if (BrowserSdk.getInstance().getCallback() != null) {\r\n                BrowserSdk.getInstance().getCallback().onOpenPdf(activity, mUrl);\r\n            } else {\r\n                BrowserSdk.openUrlExternal(activity, mUrl);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void updateErrorUi(boolean isVisible) {\r\n        if (layoutInternetError != null) {\r\n            layoutInternetError.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n        }\r\n    }\r\n\r\n\r\n    private void openFileChooser() {\r\n        CropImage.startPickImageActivity(activity);\r\n    }\r\n\r\n\r\n    private void setHideGoogleTranslatorHeaderJavaScript(WebView view) {\r\n        try {\r\n            if (isRemoveHeaderFooter) {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\r\n                    view.evaluateJavascript(hideGoogleTranslatorHeaderJavaScript, null);\r\n                    view.evaluateJavascript(hideGoogleTranslatorFooterJavaScript, null);\r\n                } else {\r\n                    view.loadUrl(\"javascript:\"\r\n                            + \"var FunctionOne = function () {\"\r\n                            + \"  try{\" + hideGoogleTranslatorHeaderJavaScript + \"}catch(e){}\"\r\n                            + \"};\");\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static final String hideGoogleTranslatorHeaderJavaScript = \"document.getElementsByTagName('header')[0].style.display = 'none'\";\r\n    //    private String hideGoogleTranslatorHeaderJavaScript = \"document.getElementById('home').remove()\";\r\n    private static final String hideGoogleTranslatorFooterJavaScript = \"document.getElementById('footer').remove()\";\r\n\r\n\r\n    private boolean isUrlPdfType(String url) {\r\n        return url.toLowerCase().endsWith(\".pdf\");\r\n    }\r\n\r\n    private boolean isUrlIntentType(String url) {\r\n        return url.toLowerCase().startsWith(\"intent://\");\r\n    }\r\n\r\n    /**\r\n     * @param url https://www.facebook.com/sharer.php?t=\r\n     */\r\n    private boolean isUrlFacebookType(String url) {\r\n        return url.toLowerCase().startsWith(\"https://www.facebook.com\");\r\n    }\r\n\r\n    /**\r\n     * @param url whatsapp://send?text=\r\n     */\r\n    private boolean isUrlWhatsAppType(String url) {\r\n        return url.toLowerCase().startsWith(\"whatsapp://\");\r\n    }\r\n\r\n    /**\r\n     * @param url tg:msg_url?url=\r\n     */\r\n    private boolean isUrlTelegramType(String url) {\r\n        return url.toLowerCase().startsWith(\"tg:msg_url\");\r\n    }\r\n\r\n    /**\r\n     * @param url https://twitter.com/intent/tweet?text=\r\n     */\r\n    private boolean isUrlTwitterType(String url) {\r\n        return url.toLowerCase().startsWith(\"https://twitter.com\");\r\n    }\r\n\r\n    /**\r\n     * @param url fb-messenger://share/?link=\r\n     */\r\n    private boolean isUrlFbMessengerType(String url) {\r\n        return url.toLowerCase().startsWith(\"fb-messenger://\");\r\n    }\r\n\r\n    private Uri mCropImageUri;\r\n\r\n    private void startCropImageActivity(Uri imageUri) {\r\n        BrowserLogger.info(\"startCropImageActivity(Uri imageUri)\", \"imageUri:\" + imageUri.toString());\r\n        if (isFixCropRatio) {\r\n            CropImage.activity(imageUri)\r\n                    .setAspectRatio(1, 1)\r\n                    .start(activity);\r\n        } else {\r\n            CropImage.activity(imageUri)\r\n                    .start(activity);\r\n        }\r\n    }\r\n\r\n    @MainThread\r\n    public void onPause() {\r\n        webView.onPause();\r\n        webView.pauseTimers();\r\n    }\r\n\r\n    @MainThread\r\n    public void onResume() {\r\n        webView.resumeTimers();\r\n        webView.onResume();\r\n    }\r\n\r\n    @MainThread\r\n    public boolean isWebViewClosedAllPages() {\r\n        if (webView != null && webView.canGoBack()) {\r\n            webView.goBack();\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    @MainThread\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE) {\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                Uri imageUri = CropImage.getPickImageResultUri(activity, data);\r\n                if(imageUri != null) {\r\n                    BrowserLogger.info(\"onActivityResult\", \"CropImage.getPickImageResultUri(activity, data)\", \"imageUri:\" + imageUri.toString());\r\n                }\r\n\r\n                // For API >= 23 we need to check specifically that we have permissions to read external storage.\r\n                if (CropImage.isReadExternalStoragePermissionsRequired(activity, imageUri)) {\r\n                    // request permissions and handle the result in onRequestPermissionsResult()\r\n                    mCropImageUri = imageUri;\r\n                    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) {\r\n                        activity.requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, CropImage.PICK_IMAGE_PERMISSIONS_REQUEST_CODE);\r\n                    }\r\n                } else {\r\n                    // no permissions required or already grunted, can start crop image activity\r\n                    startCropImageActivity(imageUri);\r\n                }\r\n            } else {\r\n                mFilePathCallback.onReceiveValue(null);\r\n                BrowserLogger.e(\"onActivityResult\", \"resultCode : Activity.RESULT_CANCELED\");\r\n            }\r\n        } else if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                mCropImageUri = result.getUri();\r\n                if(mCropImageUri != null) {\r\n                    BrowserLogger.info(\"onActivityResult\", \"result.getUri()\", \"mCropImageUri:\" + mCropImageUri.toString());\r\n                }\r\n//                imagePath = mCropImageUri.getPath();\r\n//                setImage(mCropImageUri.toString());\r\n                mFilePathCallback.onReceiveValue(new Uri[]{mCropImageUri});\r\n            } else {\r\n                mFilePathCallback.onReceiveValue(null);\r\n                BrowserLogger.e(\"onActivityResult\", \"resultCode\" + requestCode);\r\n            }\r\n        } else {\r\n            if (resultCode == Activity.RESULT_CANCELED) {\r\n                mFilePathCallback.onReceiveValue(null);\r\n                BrowserLogger.e(\"onActivityResult\", \"resultCode : Activity.RESULT_CANCELED\");\r\n            }\r\n        }\r\n    }\r\n\r\n    @MainThread\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        if (requestCode == CropImage.CAMERA_CAPTURE_PERMISSIONS_REQUEST_CODE) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                CropImage.startPickImageActivity(activity);\r\n                BrowserLogger.info(\"CropImage.startPickImageActivity(activity);\");\r\n            } else {\r\n                BrowserSdk.showToast(activity, \"Cancelling, required permissions are not granted\");\r\n                BrowserLogger.e(\"onRequestPermissionsResult()\", \"Cancelling, required permissions are not granted\");\r\n            }\r\n        }\r\n        if (requestCode == CropImage.PICK_IMAGE_PERMISSIONS_REQUEST_CODE) {\r\n            if (mCropImageUri != null && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                // required permissions granted, start crop image activity\r\n                startCropImageActivity(mCropImageUri);\r\n                BrowserLogger.info(\"startCropImageActivity(mCropImageUri)\" , \"mCropImageUri:\" + mCropImageUri.toString());\r\n            } else {\r\n                BrowserSdk.showToast(activity, \"Cancelling, required permissions are not granted\");\r\n                BrowserLogger.e(\"onRequestPermissionsResult()\", \"Cancelling, required permissions are not granted\");\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/browser/src/main/java/com/browser/browser/BrowserWebView.java b/browser/src/main/java/com/browser/browser/BrowserWebView.java
--- a/browser/src/main/java/com/browser/browser/BrowserWebView.java	(revision ecec3b5d2289d4189d585e483cfa9f5f632f3290)
+++ b/browser/src/main/java/com/browser/browser/BrowserWebView.java	(date 1646978843132)
@@ -127,7 +127,19 @@
                 loadUrl(mUrl);
             }
         });
-        webView.setWebChromeClient(new WebChromeClient() {
+
+        View nonVideoLayout = rootView.findViewById(R.id.nonVideoLayout); // Your own view, read class comments
+        ViewGroup videoLayout = (ViewGroup) rootView.findViewById(R.id.videoLayout); // Your own view, read class comments
+        //noinspection all
+        View loadingView = activity.getLayoutInflater().inflate(R.layout.view_loading_video, null); // Your own view, read class comments
+        // See all available constructors...
+        // Subscribe to standard events, such as onProgressChanged()...
+        // Your code...
+        VideoEnabledWebChromeClient webChromeClient = new VideoEnabledWebChromeClient(nonVideoLayout, videoLayout, loadingView, webView) {
+            @Override
+            public void onProgressChanged(WebView view, int progress) {
+                // Your code...
+            }
 
             @Override
             public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {
@@ -146,22 +158,6 @@
                 }
                 return false;
             }
-        });
-
-        View nonVideoLayout = rootView.findViewById(R.id.nonVideoLayout); // Your own view, read class comments
-        ViewGroup videoLayout = (ViewGroup) rootView.findViewById(R.id.videoLayout); // Your own view, read class comments
-        //noinspection all
-        View loadingView = activity.getLayoutInflater().inflate(R.layout.view_loading_video, null); // Your own view, read class comments
-        // See all available constructors...
-        // Subscribe to standard events, such as onProgressChanged()...
-        // Your code...
-        VideoEnabledWebChromeClient webChromeClient = new VideoEnabledWebChromeClient(nonVideoLayout, videoLayout, loadingView, webView) // See all available constructors...
-        {
-            // Subscribe to standard events, such as onProgressChanged()...
-            @Override
-            public void onProgressChanged(WebView view, int progress) {
-                // Your code...
-            }
         };
         webChromeClient.setOnToggledFullscreen(new VideoEnabledWebChromeClient.ToggledFullscreenCallback() {
             @Override
@@ -508,7 +504,7 @@
         if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE) {
             if (resultCode == Activity.RESULT_OK) {
                 Uri imageUri = CropImage.getPickImageResultUri(activity, data);
-                if(imageUri != null) {
+                if (imageUri != null) {
                     BrowserLogger.info("onActivityResult", "CropImage.getPickImageResultUri(activity, data)", "imageUri:" + imageUri.toString());
                 }
 
@@ -531,7 +527,7 @@
             CropImage.ActivityResult result = CropImage.getActivityResult(data);
             if (resultCode == Activity.RESULT_OK) {
                 mCropImageUri = result.getUri();
-                if(mCropImageUri != null) {
+                if (mCropImageUri != null) {
                     BrowserLogger.info("onActivityResult", "result.getUri()", "mCropImageUri:" + mCropImageUri.toString());
                 }
 //                imagePath = mCropImageUri.getPath();
@@ -564,7 +560,7 @@
             if (mCropImageUri != null && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                 // required permissions granted, start crop image activity
                 startCropImageActivity(mCropImageUri);
-                BrowserLogger.info("startCropImageActivity(mCropImageUri)" , "mCropImageUri:" + mCropImageUri.toString());
+                BrowserLogger.info("startCropImageActivity(mCropImageUri)", "mCropImageUri:" + mCropImageUri.toString());
             } else {
                 BrowserSdk.showToast(activity, "Cancelling, required permissions are not granted");
                 BrowserLogger.e("onRequestPermissionsResult()", "Cancelling, required permissions are not granted");
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    \r\n    repositories {\r\n        google()\r\n        jcenter()\r\n        \r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:3.6.3'\r\n        \r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n    ext {\r\n        appcompat = '1.3.0-alpha01'\r\n        material = '1.3.0-alpha01'\r\n        recyclerview = '1.1.0'\r\n        cardview = '1.0.0'\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision ecec3b5d2289d4189d585e483cfa9f5f632f3290)
+++ b/build.gradle	(date 1643356400637)
@@ -22,8 +22,8 @@
         jcenter()
     }
     ext {
-        appcompat = '1.3.0-alpha01'
-        material = '1.3.0-alpha01'
+        appcompat = '1.3.0'
+        material = '1.3.0'
         recyclerview = '1.1.0'
         cardview = '1.0.0'
     }
Index: app/src/main/java/com/appsfeature/browser/util/AppConstant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.appsfeature.browser.util;\r\n\r\n\r\npublic interface AppConstant {\r\n//    String BASE_URL = \"https://www.bharatsamachartv.in/allinone/\" ;\r\n//    String BASE_URL = \"https://www.bharatsamachartv.in/web/applivetv\" ;\r\n//    String BASE_URL = \"https://katyayanacademy.com/erp/index.php/student/liveschedule\" ;\r\n    String BASE_URL = \"https://stackoverflow.com/questions/8753959/round-a-floating-point-number-to-the-next-integer-value-in-java\" ;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/appsfeature/browser/util/AppConstant.java b/app/src/main/java/com/appsfeature/browser/util/AppConstant.java
--- a/app/src/main/java/com/appsfeature/browser/util/AppConstant.java	(revision ecec3b5d2289d4189d585e483cfa9f5f632f3290)
+++ b/app/src/main/java/com/appsfeature/browser/util/AppConstant.java	(date 1646978455147)
@@ -5,5 +5,6 @@
 //    String BASE_URL = "https://www.bharatsamachartv.in/allinone/" ;
 //    String BASE_URL = "https://www.bharatsamachartv.in/web/applivetv" ;
 //    String BASE_URL = "https://katyayanacademy.com/erp/index.php/student/liveschedule" ;
-    String BASE_URL = "https://stackoverflow.com/questions/8753959/round-a-floating-point-number-to-the-next-integer-value-in-java" ;
+//    String BASE_URL = "https://stackoverflow.com/questions/8753959/round-a-floating-point-number-to-the-next-integer-value-in-java" ;
+    String BASE_URL = "https://www.bizwiz.co.in/agent/register" ;
 }
