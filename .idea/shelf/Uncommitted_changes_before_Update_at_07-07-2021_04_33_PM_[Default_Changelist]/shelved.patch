Index: browser/src/main/java/com/browser/browser/BrowserWebView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.browser.browser;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.net.Uri;\r\nimport android.net.http.SslError;\r\nimport android.os.Build;\r\nimport android.text.TextUtils;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.webkit.ConsoleMessage;\r\nimport android.webkit.SslErrorHandler;\r\nimport android.webkit.ValueCallback;\r\nimport android.webkit.WebChromeClient;\r\nimport android.webkit.WebResourceError;\r\nimport android.webkit.WebResourceRequest;\r\nimport android.webkit.WebResourceResponse;\r\nimport android.webkit.WebSettings;\r\nimport android.webkit.WebView;\r\nimport android.webkit.WebViewClient;\r\n\r\nimport androidx.annotation.MainThread;\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.browser.BrowserSdk;\r\nimport com.browser.R;\r\nimport com.browser.interfaces.BrowserListener;\r\nimport com.browser.views.VideoEnabledWebChromeClient;\r\nimport com.browser.views.VideoEnabledWebView;\r\nimport com.theartofdev.edmodo.cropper.CropImage;\r\n\r\n\r\npublic class BrowserWebView {\r\n\r\n    private static final String TAG = \"BrowserActivity\";\r\n    private final Activity activity;\r\n    private VideoEnabledWebView webView;\r\n    private boolean isRemoveHeaderFooter = false;\r\n    private boolean isFixCropRatio = false;\r\n    private BrowserListener callback;\r\n    private View layoutInternetError;\r\n    private String mUrl;\r\n\r\n    public BrowserWebView(Activity activity) {\r\n        this.activity = activity;\r\n    }\r\n\r\n    public BrowserWebView addBrowserListener(BrowserListener callback) {\r\n        this.callback = callback;\r\n        return this;\r\n    }\r\n\r\n    public BrowserWebView setRemoveHeaderFooter(boolean removeHeaderFooter) {\r\n        isRemoveHeaderFooter = removeHeaderFooter;\r\n        return this;\r\n    }\r\n\r\n    public BrowserWebView setFixCropRatio(boolean fixCropRatio) {\r\n        isFixCropRatio = fixCropRatio;\r\n        return this;\r\n    }\r\n\r\n    private ValueCallback<Uri[]> mFilePathCallback;\r\n\r\n\r\n    public void init(Activity activity) {\r\n        View rootView = activity.getWindow().getDecorView().getRootView();\r\n        initView(rootView);\r\n    }\r\n\r\n    public void init(View view) {\r\n        initView(view);\r\n    }\r\n\r\n    public void loadUrl(String url) {\r\n        this.mUrl = url;\r\n        if (webView == null || TextUtils.isEmpty(url)) {\r\n            BrowserSdk.showToast(activity, \"Invalid Url\");\r\n            activity.finish();\r\n            return;\r\n        }\r\n        webView.setVisibility(View.INVISIBLE);\r\n        if (callback != null) {\r\n            callback.onProgressBarUpdate(View.VISIBLE);\r\n        }\r\n        webView.loadUrl(url);\r\n    }\r\n\r\n    private void initView(View rootView) {\r\n        webView = rootView.findViewById(R.id.webView);\r\n        layoutInternetError = rootView.findViewById(R.id.layout_internet_error);\r\n        (rootView.findViewById(R.id.btn_refresh)).setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                updateErrorUi(false);\r\n                loadUrl(mUrl);\r\n            }\r\n        });\r\n        webView.setWebChromeClient(new WebChromeClient() {\r\n\r\n            @Override\r\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams) {\r\n                mFilePathCallback = filePathCallback;\r\n                openFileChooser();\r\n                return true;//; return super.onShowFileChooser(webView, filePathCallback, fileChooserParams);\r\n            }\r\n\r\n            @Override\r\n            public boolean onConsoleMessage(ConsoleMessage consoleMessage) {\r\n                super.onConsoleMessage(consoleMessage);\r\n                if (consoleMessage.message().startsWith(TAG)) {\r\n                    if (consoleMessage.message().toLowerCase().contains(\"viewable only\") && consoleMessage.message().toLowerCase().contains(\"landscape\")) {\r\n//                        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        View nonVideoLayout = rootView.findViewById(R.id.nonVideoLayout); // Your own view, read class comments\r\n        ViewGroup videoLayout = (ViewGroup) rootView.findViewById(R.id.videoLayout); // Your own view, read class comments\r\n        //noinspection all\r\n        View loadingView = activity.getLayoutInflater().inflate(R.layout.view_loading_video, null); // Your own view, read class comments\r\n        // See all available constructors...\r\n        // Subscribe to standard events, such as onProgressChanged()...\r\n        // Your code...\r\n        VideoEnabledWebChromeClient webChromeClient = new VideoEnabledWebChromeClient(nonVideoLayout, videoLayout, loadingView, webView) // See all available constructors...\r\n        {\r\n            // Subscribe to standard events, such as onProgressChanged()...\r\n            @Override\r\n            public void onProgressChanged(WebView view, int progress) {\r\n                // Your code...\r\n            }\r\n        };\r\n        webChromeClient.setOnToggledFullscreen(new VideoEnabledWebChromeClient.ToggledFullscreenCallback() {\r\n            @Override\r\n            public void toggledFullscreen(boolean fullscreen) {\r\n                // Your code to handle the full-screen change, for example showing and hiding the title bar. Example:\r\n                if (fullscreen) {\r\n                    WindowManager.LayoutParams attrs = activity.getWindow().getAttributes();\r\n                    attrs.flags |= WindowManager.LayoutParams.FLAG_FULLSCREEN;\r\n                    attrs.flags |= WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;\r\n                    activity.getWindow().setAttributes(attrs);\r\n                    activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);\r\n                    if (callback != null) {\r\n                        callback.onToolbarVisibilityUpdate(View.GONE);\r\n                    }\r\n                } else {\r\n                    WindowManager.LayoutParams attrs = activity.getWindow().getAttributes();\r\n                    attrs.flags &= ~WindowManager.LayoutParams.FLAG_FULLSCREEN;\r\n                    attrs.flags &= ~WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;\r\n                    activity.getWindow().setAttributes(attrs);\r\n                    activity.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);\r\n                    if (callback != null) {\r\n                        callback.onToolbarVisibilityUpdate(View.VISIBLE);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        webView.setWebChromeClient(webChromeClient);\r\n\r\n        webView.setWebViewClient(new WebViewClient() {\r\n\r\n            @Override\r\n            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n                super.shouldOverrideUrlLoading(view, request);\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n                    String requestUrl = request.getUrl().toString();\r\n                    return filterUrl(view, requestUrl);\r\n                }\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean shouldOverrideUrlLoading(WebView view, String url) {\r\n                super.shouldOverrideUrlLoading(view, url);\r\n                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n                    return filterUrl(view, url);\r\n                }\r\n                return false;\r\n            }\r\n\r\n            private boolean filterUrl(WebView view, String url) {\r\n                if (url.startsWith(\"tel:\")) {\r\n                    try {\r\n                        Intent intent = new Intent(Intent.ACTION_DIAL,\r\n                                Uri.parse(url));\r\n                        activity.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        BrowserSdk.showToast(activity, e.getMessage());\r\n                    }\r\n                    return true;\r\n                }\r\n                if (url.contains(\"geo:\") || url.contains(\"google.com/maps/\")) {\r\n                    try {\r\n                        Uri gmmIntentUri = Uri.parse(url);\r\n                        Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);\r\n                        mapIntent.setPackage(\"com.google.android.apps.maps\");\r\n                        if (mapIntent.resolveActivity(activity.getPackageManager()) != null) {\r\n                            activity.startActivity(mapIntent);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        BrowserSdk.showToast(activity, e.getMessage());\r\n                    }\r\n                    return true;\r\n                }\r\n                if (url.endsWith(\"viewer.action=download\")) {\r\n                    Intent i = new Intent(Intent.ACTION_VIEW);\r\n                    i.setData(Uri.parse(url));\r\n                    activity.startActivity(i);\r\n                    return true;\r\n                }\r\n\r\n                if (isUrlIntentType(url) || isUrlWhatsAppType(url) || isUrlTelegramType(url) || isUrlFbMessengerType(url)) {\r\n                    BrowserSdk.openIntentUrl(activity, url);\r\n                    view.stopLoading();\r\n                    if (callback != null) {\r\n                        callback.onProgressBarUpdate(View.GONE);\r\n                    }\r\n                    return true;\r\n                }\r\n                if (isUrlFacebookType(url) || isUrlTwitterType(url)) {\r\n                    BrowserSdk.openUrlExternal(activity, url);\r\n                    view.stopLoading();\r\n                    return true;\r\n                }\r\n                view.loadUrl(url);\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public void onLoadResource(WebView view, String url) {\r\n                setHideGoogleTranslatorHeaderJavaScript(view);\r\n            }\r\n\r\n            @Override\r\n            public void onPageCommitVisible(WebView view, String url) {\r\n                super.onPageCommitVisible(view, url);\r\n                if (callback != null) {\r\n                    callback.onProgressBarUpdate(View.GONE);\r\n                }\r\n                if (webView != null) {\r\n                    webView.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onPageFinished(WebView view, String url) {\r\n                super.onPageFinished(view, url);\r\n                if (callback != null) {\r\n                    callback.onProgressBarUpdate(View.GONE);\r\n                }\r\n                if (webView != null) {\r\n                    webView.setVisibility(View.VISIBLE);\r\n                }\r\n//                if (!isUrlPdfType(url))\r\n//                    view.loadUrl(\"javascript:console.log('\" + TAG + \"'+document.getElementsByTagName('html')[0].innerHTML);\");\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\r\n                updateErrorUi(true);\r\n                super.onReceivedHttpError(view, request, errorResponse);\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\r\n                updateErrorUi(true);\r\n                super.onReceivedSslError(view, handler, error);\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\r\n                updateErrorUi(true);\r\n                super.onReceivedError(view, errorCode, description, failingUrl);\r\n            }\r\n\r\n            @Override\r\n            public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\r\n                updateErrorUi(true);\r\n                super.onReceivedError(view, request, error);\r\n            }\r\n        });\r\n        webView.getSettings().setJavaScriptEnabled(true);\r\n        webView.getSettings().setAllowFileAccess(true);\r\n        webView.getSettings().setAllowFileAccessFromFileURLs(true);\r\n        webView.getSettings().setAllowUniversalAccessFromFileURLs(true);\r\n        webView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);\r\n        webView.getSettings().setAllowContentAccess(true);\r\n        webView.getSettings().setSupportMultipleWindows(false);\r\n        webView.getSettings().setDomStorageEnabled(true);\r\n        webView.getSettings().setBuiltInZoomControls(false);\r\n        webView.getSettings().setAppCacheEnabled(true);\r\n        webView.getSettings().setLoadWithOverviewMode(true);\r\n//        webView.getSettings().setUseWideViewPort(true);\r\n        webView.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);\r\n        webView.getSettings().setAppCachePath(activity.getApplicationContext()\r\n                .getCacheDir().getAbsolutePath());\r\n    }\r\n\r\n    private void updateErrorUi(boolean isVisible) {\r\n        if (layoutInternetError != null) {\r\n            layoutInternetError.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n        }\r\n    }\r\n\r\n\r\n    private void openFileChooser() {\r\n        CropImage.startPickImageActivity(activity);\r\n    }\r\n\r\n\r\n    private void setHideGoogleTranslatorHeaderJavaScript(WebView view) {\r\n        try {\r\n            if (isRemoveHeaderFooter) {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\r\n                    view.evaluateJavascript(hideGoogleTranslatorHeaderJavaScript, null);\r\n                    view.evaluateJavascript(hideGoogleTranslatorFooterJavaScript, null);\r\n                } else {\r\n                    view.loadUrl(\"javascript:\"\r\n                            + \"var FunctionOne = function () {\"\r\n                            + \"  try{\" + hideGoogleTranslatorHeaderJavaScript + \"}catch(e){}\"\r\n                            + \"};\");\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static final String hideGoogleTranslatorHeaderJavaScript = \"document.getElementsByTagName('header')[0].style.display = 'none'\";\r\n    //    private String hideGoogleTranslatorHeaderJavaScript = \"document.getElementById('home').remove()\";\r\n    private static final String hideGoogleTranslatorFooterJavaScript = \"document.getElementById('footer').remove()\";\r\n\r\n\r\n    private boolean isUrlIntentType(String url) {\r\n        return url.toLowerCase().startsWith(\"intent://\");\r\n    }\r\n\r\n    /**\r\n     * @param url https://www.facebook.com/sharer.php?t=\r\n     */\r\n    private boolean isUrlFacebookType(String url) {\r\n        return url.toLowerCase().startsWith(\"https://www.facebook.com\");\r\n    }\r\n\r\n    /**\r\n     * @param url whatsapp://send?text=\r\n     */\r\n    private boolean isUrlWhatsAppType(String url) {\r\n        return url.toLowerCase().startsWith(\"whatsapp://\");\r\n    }\r\n\r\n    /**\r\n     * @param url tg:msg_url?url=\r\n     */\r\n    private boolean isUrlTelegramType(String url) {\r\n        return url.toLowerCase().startsWith(\"tg:msg_url\");\r\n    }\r\n\r\n    /**\r\n     * @param url https://twitter.com/intent/tweet?text=\r\n     */\r\n    private boolean isUrlTwitterType(String url) {\r\n        return url.toLowerCase().startsWith(\"https://twitter.com\");\r\n    }\r\n\r\n    /**\r\n     * @param url fb-messenger://share/?link=\r\n     */\r\n    private boolean isUrlFbMessengerType(String url) {\r\n        return url.toLowerCase().startsWith(\"fb-messenger://\");\r\n    }\r\n\r\n    private Uri mCropImageUri;\r\n\r\n    private void startCropImageActivity(Uri imageUri) {\r\n        if (isFixCropRatio) {\r\n            CropImage.activity(imageUri)\r\n                    .setAspectRatio(1, 1)\r\n                    .start(activity);\r\n        } else {\r\n            CropImage.activity(imageUri)\r\n                    .start(activity);\r\n        }\r\n    }\r\n\r\n    @MainThread\r\n    public void onPause() {\r\n        webView.onPause();\r\n        webView.pauseTimers();\r\n    }\r\n\r\n    @MainThread\r\n    public void onResume() {\r\n        webView.resumeTimers();\r\n        webView.onResume();\r\n    }\r\n\r\n    @MainThread\r\n    public boolean isWebViewClosedAllPages() {\r\n        if (webView != null && webView.canGoBack()) {\r\n            webView.goBack();\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    @MainThread\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        if (requestCode == CropImage.PICK_IMAGE_CHOOSER_REQUEST_CODE) {\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                Uri imageUri = CropImage.getPickImageResultUri(activity, data);\r\n\r\n                // For API >= 23 we need to check specifically that we have permissions to read external storage.\r\n                if (CropImage.isReadExternalStoragePermissionsRequired(activity, imageUri)) {\r\n                    // request permissions and handle the result in onRequestPermissionsResult()\r\n                    mCropImageUri = imageUri;\r\n                    if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) {\r\n                        activity.requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, CropImage.PICK_IMAGE_PERMISSIONS_REQUEST_CODE);\r\n                    }\r\n                } else {\r\n                    // no permissions required or already grunted, can start crop image activity\r\n                    startCropImageActivity(imageUri);\r\n                }\r\n            } else {\r\n                mFilePathCallback.onReceiveValue(null);\r\n            }\r\n        } else if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            CropImage.ActivityResult result = CropImage.getActivityResult(data);\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                mCropImageUri = result.getUri();\r\n//                imagePath = mCropImageUri.getPath();\r\n//                setImage(mCropImageUri.toString());\r\n                mFilePathCallback.onReceiveValue(new Uri[]{mCropImageUri});\r\n            } else {\r\n                mFilePathCallback.onReceiveValue(null);\r\n            }\r\n        } else {\r\n            if (resultCode == Activity.RESULT_CANCELED) {\r\n                mFilePathCallback.onReceiveValue(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    @MainThread\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        if (requestCode == CropImage.CAMERA_CAPTURE_PERMISSIONS_REQUEST_CODE) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                CropImage.startPickImageActivity(activity);\r\n            } else {\r\n                BrowserSdk.showToast(activity, \"Cancelling, required permissions are not granted\");\r\n            }\r\n        }\r\n        if (requestCode == CropImage.PICK_IMAGE_PERMISSIONS_REQUEST_CODE) {\r\n            if (mCropImageUri != null && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                // required permissions granted, start crop image activity\r\n                startCropImageActivity(mCropImageUri);\r\n            } else {\r\n                BrowserSdk.showToast(activity, \"Cancelling, required permissions are not granted\");\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- browser/src/main/java/com/browser/browser/BrowserWebView.java	(revision 07bd24dfef25af9685aab5a680a9920e43e18cf3)
+++ browser/src/main/java/com/browser/browser/BrowserWebView.java	(date 1625655796064)
@@ -209,6 +209,10 @@
                     }
                     return true;
                 }
+                if (isUrlPdfType(mUrl)) {
+                    openPDF(mUrl);
+                    return true;
+                }
                 if (url.endsWith("viewer.action=download")) {
                     Intent i = new Intent(Intent.ACTION_VIEW);
                     i.setData(Uri.parse(url));
@@ -303,6 +307,16 @@
                 .getCacheDir().getAbsolutePath());
     }
 
+    private void openPDF(String mUrl) {
+        if (!TextUtils.isEmpty(mUrl)) {
+            if (Helper.getInstance().getListener() != null) {
+                Helper.getInstance().getListener().onOpenPdf(this, (int) System.currentTimeMillis(), TextUtils.isEmpty(title) ? "From Browser" : title, url);
+            } else {
+                SocialUtil.openUrlExternal(this, mUrl);
+            }
+        }
+    }
+
     private void updateErrorUi(boolean isVisible) {
         if (layoutInternetError != null) {
             layoutInternetError.setVisibility(isVisible ? View.VISIBLE : View.GONE);
@@ -338,6 +352,10 @@
     private static final String hideGoogleTranslatorFooterJavaScript = "document.getElementById('footer').remove()";
 
 
+    private boolean isUrlPdfType(String url) {
+        return url.toLowerCase().endsWith(".pdf");
+    }
+
     private boolean isUrlIntentType(String url) {
         return url.toLowerCase().startsWith("intent://");
     }
Index: browser/src/main/res/values/dimens.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <dimen name=\"nav_header_height\">160dp</dimen>\r\n    <dimen name=\"activity_vertical_margin\">16dp</dimen>\r\n    <dimen name=\"activity_horizontal_margin\">16dp</dimen>\r\n    <dimen name=\"action_bar_height\">70dp</dimen>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- browser/src/main/res/values/dimens.xml	(revision 07bd24dfef25af9685aab5a680a9920e43e18cf3)
+++ browser/src/main/res/values/dimens.xml	(date 1625655590016)
@@ -3,5 +3,5 @@
     <dimen name="nav_header_height">160dp</dimen>
     <dimen name="activity_vertical_margin">16dp</dimen>
     <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="action_bar_height">70dp</dimen>
+    <dimen name="action_bar_height">58dp</dimen>
 </resources>
\ No newline at end of file
